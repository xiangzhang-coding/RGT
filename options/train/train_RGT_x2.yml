# general settings
name: train_RGT_x2_P64_DF2K_B8G4_tain
model_type: RGTModel
scale: 2
num_gpu: auto
manual_seed: 10

# dataset and data loader settings
datasets:
  train:
    task: SR
    name: DF2K
    type: PairedImageDataset
    dataroot_gt: datasets/DF2K/HR
    dataroot_lq: datasets/DF2K/LR_bicubic/X2
    filename_tmpl: '{}x2'
    io_backend:
      type: disk

    gt_size: 128      #对高分辨率图像裁剪为 128x128 的小块，以增加数据多样性。原因不明白。
    use_hflip: True     #启用水平翻转作为数据增强方式。
    use_rot: True       #启用旋转作为数据增强方式。

    # data loader
    use_shuffle: True     #是否在每个训练周期 (epoch) 对数据进行随机打乱。
    num_worker_per_gpu: 16      #每个 GPU 使用的数据加载线程数。
    batch_size_per_gpu: 8     #每个 GPU 的批量大小。
    dataset_enlarge_ratio: 1      #数据集扩展比例。1：表示不扩展数据集。
    prefetch_mode: ~      #指定数据预取模式。    ~ 或 None：不使用数据预取。

  val:
    task: SR
    name: Set5
    type: PairedImageDataset
    dataroot_gt: datasets/benchmark/Set5/HR
    dataroot_lq: datasets/benchmark/Set5/LR_bicubic/X2
    filename_tmpl: '{}x2'
    io_backend:
      type: disk

# network structures
network_g:
  type: RGT
  upscale: 2
  in_chans: 3
  img_size: 64
  img_range: 1.
  depth: [6,6,6,6,6,6,6,6]
  embed_dim: 180
  num_heads: [6,6,6,6,6,6,6,6]
  mlp_ratio: 2
  resi_connection: '1conv'
  split_size: [8,32]
  c_ratio: 0.5

# path
path:
  pretrain_network_g: ~     #指定生成器（network_g）预训练模型的路径。  ~ 表示未设置路径，模型将从头开始训练
  strict_load_g: true
  resume_state: ~     #指定训练恢复状态的路径。  ~ 表示不恢复训练状态，训练将从头开始。

# training settings
train:
  optim_g:
    type: Adam
    lr: !!float 2e-4      #指定学习率为 2e-4（即 0.0002）。!!float 表示强制解析为浮点数。
    weight_decay: 0       #设置权重衰减（L2 正则化）为 0。权重衰减用于防止过拟合，但在某些任务中可能无需设置。
    betas: [0.9, 0.99]      #设置 Adam 优化器的动量参数。beta1=0.9：控制一阶矩估计（平均梯度）的动量。beta2=0.99：控制二阶矩估计（梯度平方均值）的动量。

  scheduler:
    type: MultiStepLR     #使用多步学习率调度器（MultiStepLR）。
    milestones: [250000, 400000, 450000, 475000]      #指定的训练迭代数（milestones）时，调整学习率。逐步降低学习率，帮助模型收敛到更优解。
    gamma: 0.5      #每次调整学习率时，将学习率乘以 0.5。

  total_iter: 500000
  warmup_iter: -1  # no warm up     #学习率预热可以在训练开始时逐渐提高学习率，避免模型参数剧烈更新。

  # losses
  pixel_opt:
    type: L1Loss
    loss_weight: 1.0
    reduction: mean       #对损失值取平均值。

# validation settings
val:
  val_freq: !!float 5e3    #每 5000 次训练迭代后进行一次验证。
  save_img: False

  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 2
      test_y_channel: True

# logging settings
logger:
  print_freq: 200       #每隔 200 次训练迭代打印一次日志信息。控制训练过程中的输出频率，用于监控训练指标（如损失、学习率等）。
  save_checkpoint_freq: !!float 5e3     #每 5000 次迭代保存一次模型检查点。
  use_tb_logger: True       #开启 TensorBoard 日志记录。     tensorboard --logdir=./tb_logger

  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl       #NCCL（NVIDIA Collective Communications Library）：NVIDIA 提供的高效通信库，支持 GPU 间的高效通信，适合多 GPU 和多节点训练。
  port: 29500